// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dao

import (
	"context"
	"strings"

	"gorm.io/gorm"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"talkee/core"

	"time"
)

func newSnapshot(db *gorm.DB, opts ...gen.DOOption) snapshot {
	_snapshot := snapshot{}

	_snapshot.snapshotDo.UseDB(db, opts...)
	_snapshot.snapshotDo.UseModel(&core.Snapshot{})

	tableName := _snapshot.snapshotDo.TableName()
	_snapshot.ALL = field.NewAsterisk(tableName)
	_snapshot.SnapshotID = field.NewString(tableName, "snapshot_id")
	_snapshot.TraceID = field.NewString(tableName, "trace_id")
	_snapshot.Source = field.NewString(tableName, "source")
	_snapshot.TransactionHash = field.NewString(tableName, "transaction_hash")
	_snapshot.Receiver = field.NewString(tableName, "receiver")
	_snapshot.Sender = field.NewString(tableName, "sender")
	_snapshot.Type = field.NewString(tableName, "type")
	_snapshot.UserID = field.NewString(tableName, "user_id")
	_snapshot.OpponentID = field.NewString(tableName, "opponent_id")
	_snapshot.AssetID = field.NewString(tableName, "asset_id")
	_snapshot.Memo = field.NewString(tableName, "memo")
	_snapshot.Amount = field.NewField(tableName, "amount")
	_snapshot.CreatedAt = field.NewTime(tableName, "created_at")

	_snapshot.fillFieldMap()

	return _snapshot
}

type snapshot struct {
	snapshotDo

	ALL             field.Asterisk
	SnapshotID      field.String
	TraceID         field.String
	Source          field.String
	TransactionHash field.String
	Receiver        field.String
	Sender          field.String
	Type            field.String
	UserID          field.String
	OpponentID      field.String
	AssetID         field.String
	Memo            field.String
	Amount          field.Field
	CreatedAt       field.Time

	fieldMap map[string]field.Expr
}

func (s snapshot) Table(newTableName string) *snapshot {
	s.snapshotDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s snapshot) As(alias string) *snapshot {
	s.snapshotDo.DO = *(s.snapshotDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *snapshot) updateTableName(table string) *snapshot {
	s.ALL = field.NewAsterisk(table)
	s.SnapshotID = field.NewString(table, "snapshot_id")
	s.TraceID = field.NewString(table, "trace_id")
	s.Source = field.NewString(table, "source")
	s.TransactionHash = field.NewString(table, "transaction_hash")
	s.Receiver = field.NewString(table, "receiver")
	s.Sender = field.NewString(table, "sender")
	s.Type = field.NewString(table, "type")
	s.UserID = field.NewString(table, "user_id")
	s.OpponentID = field.NewString(table, "opponent_id")
	s.AssetID = field.NewString(table, "asset_id")
	s.Memo = field.NewString(table, "memo")
	s.Amount = field.NewField(table, "amount")
	s.CreatedAt = field.NewTime(table, "created_at")

	s.fillFieldMap()

	return s
}

func (s *snapshot) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *snapshot) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 13)
	s.fieldMap["snapshot_id"] = s.SnapshotID
	s.fieldMap["trace_id"] = s.TraceID
	s.fieldMap["source"] = s.Source
	s.fieldMap["transaction_hash"] = s.TransactionHash
	s.fieldMap["receiver"] = s.Receiver
	s.fieldMap["sender"] = s.Sender
	s.fieldMap["type"] = s.Type
	s.fieldMap["user_id"] = s.UserID
	s.fieldMap["opponent_id"] = s.OpponentID
	s.fieldMap["asset_id"] = s.AssetID
	s.fieldMap["memo"] = s.Memo
	s.fieldMap["amount"] = s.Amount
	s.fieldMap["created_at"] = s.CreatedAt
}

func (s snapshot) clone(db *gorm.DB) snapshot {
	s.snapshotDo.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s snapshot) replaceDB(db *gorm.DB) snapshot {
	s.snapshotDo.ReplaceDB(db)
	return s
}

type snapshotDo struct{ gen.DO }

type ISnapshotDo interface {
	WithContext(ctx context.Context) ISnapshotDo

	GetSnapshots(ctx context.Context, from time.Time, limit int) (result []*core.Snapshot, err error)
	GetSnapshot(ctx context.Context, snapshotID string) (result *core.Snapshot, err error)
	SetSnapshot(ctx context.Context, snapshot *core.Snapshot) (err error)
}

// SELECT
//
//	*
//
// FROM snapshots
// WHERE
//
//	created_at >= @from
//
// LIMIT @limit;
func (s snapshotDo) GetSnapshots(ctx context.Context, from time.Time, limit int) (result []*core.Snapshot, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	params = append(params, from)
	params = append(params, limit)
	generateSQL.WriteString("SELECT * FROM snapshots WHERE created_at >= ? LIMIT ?; ")

	var executeSQL *gorm.DB
	executeSQL = s.UnderlyingDB().Raw(generateSQL.String(), params...).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT
//
//	*
//
// FROM snapshots
// WHERE
//
//	snapshot_id = @snapshotID
//
// LIMIT 1;
func (s snapshotDo) GetSnapshot(ctx context.Context, snapshotID string) (result *core.Snapshot, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	params = append(params, snapshotID)
	generateSQL.WriteString("SELECT * FROM snapshots WHERE snapshot_id = ? LIMIT 1; ")

	var executeSQL *gorm.DB
	executeSQL = s.UnderlyingDB().Raw(generateSQL.String(), params...).Take(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// INSERT INTO snapshots
// (
//
//	"snapshot_id",
//	"trace_id",
//	"source",
//	"transaction_hash",
//	"receiver",
//	"sender",
//	"type",
//	"user_id",
//	"opponent_id",
//	"asset_id",
//	"amount",
//	"memo",
//	"created_at"
//
// ) VALUES (
//
//	@snapshot.SnapshotID,
//	@snapshot.TraceID,
//	@snapshot.Source,
//	@snapshot.TransactionHash,
//	@snapshot.Receiver,
//	@snapshot.Sender,
//	@snapshot.Type,
//	@snapshot.UserID,
//	@snapshot.OpponentID,
//	@snapshot.AssetID,
//	@snapshot.Amount,
//	@snapshot.Memo,
//	NOW()
//
// );
func (s snapshotDo) SetSnapshot(ctx context.Context, snapshot *core.Snapshot) (err error) {
	var params []interface{}

	var generateSQL strings.Builder
	params = append(params, snapshot.SnapshotID)
	params = append(params, snapshot.TraceID)
	params = append(params, snapshot.Source)
	params = append(params, snapshot.TransactionHash)
	params = append(params, snapshot.Receiver)
	params = append(params, snapshot.Sender)
	params = append(params, snapshot.Type)
	params = append(params, snapshot.UserID)
	params = append(params, snapshot.OpponentID)
	params = append(params, snapshot.AssetID)
	params = append(params, snapshot.Amount)
	params = append(params, snapshot.Memo)
	generateSQL.WriteString("INSERT INTO snapshots ( \"snapshot_id\", \"trace_id\", \"source\", \"transaction_hash\", \"receiver\", \"sender\", \"type\", \"user_id\", \"opponent_id\", \"asset_id\", \"amount\", \"memo\", \"created_at\" ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, NOW() ); ")

	var executeSQL *gorm.DB
	executeSQL = s.UnderlyingDB().Exec(generateSQL.String(), params...) // ignore_security_alert
	err = executeSQL.Error

	return
}

func (s snapshotDo) WithContext(ctx context.Context) ISnapshotDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s *snapshotDo) withDO(do gen.Dao) *snapshotDo {
	s.DO = *do.(*gen.DO)
	return s
}
