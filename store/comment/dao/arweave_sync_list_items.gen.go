// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dao

import (
	"context"
	"strings"

	"gorm.io/gorm"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"talkee/core"
)

func newArweaveSyncListItem(db *gorm.DB, opts ...gen.DOOption) arweaveSyncListItem {
	_arweaveSyncListItem := arweaveSyncListItem{}

	_arweaveSyncListItem.arweaveSyncListItemDo.UseDB(db, opts...)
	_arweaveSyncListItem.arweaveSyncListItemDo.UseModel(&core.ArweaveSyncListItem{})

	tableName := _arweaveSyncListItem.arweaveSyncListItemDo.TableName()
	_arweaveSyncListItem.ALL = field.NewAsterisk(tableName)
	_arweaveSyncListItem.CommentID = field.NewUint64(tableName, "comment_id")
	_arweaveSyncListItem.UserID = field.NewUint64(tableName, "user_id")
	_arweaveSyncListItem.SiteID = field.NewUint64(tableName, "site_id")
	_arweaveSyncListItem.Slug = field.NewString(tableName, "slug")
	_arweaveSyncListItem.FavorCount = field.NewUint64(tableName, "favor_count")
	_arweaveSyncListItem.ReplyCount = field.NewUint64(tableName, "reply_count")
	_arweaveSyncListItem.ArweaveTxHash = field.NewString(tableName, "arweave_tx_hash")
	_arweaveSyncListItem.Content = field.NewString(tableName, "content")
	_arweaveSyncListItem.MixinUserID = field.NewString(tableName, "mixin_user_id")
	_arweaveSyncListItem.MixinIdentityNumber = field.NewString(tableName, "mixin_identity_number")
	_arweaveSyncListItem.FullName = field.NewString(tableName, "full_name")
	_arweaveSyncListItem.AvatarURL = field.NewString(tableName, "avatar_url")
	_arweaveSyncListItem.MvmPublicKey = field.NewString(tableName, "mvm_public_key")
	_arweaveSyncListItem.CreatedAt = field.NewTime(tableName, "created_at")
	_arweaveSyncListItem.UpdatedAt = field.NewTime(tableName, "updated_at")

	_arweaveSyncListItem.fillFieldMap()

	return _arweaveSyncListItem
}

type arweaveSyncListItem struct {
	arweaveSyncListItemDo

	ALL                 field.Asterisk
	CommentID           field.Uint64
	UserID              field.Uint64
	SiteID              field.Uint64
	Slug                field.String
	FavorCount          field.Uint64
	ReplyCount          field.Uint64
	ArweaveTxHash       field.String
	Content             field.String
	MixinUserID         field.String
	MixinIdentityNumber field.String
	FullName            field.String
	AvatarURL           field.String
	MvmPublicKey        field.String
	CreatedAt           field.Time
	UpdatedAt           field.Time

	fieldMap map[string]field.Expr
}

func (a arweaveSyncListItem) Table(newTableName string) *arweaveSyncListItem {
	a.arweaveSyncListItemDo.UseTable(newTableName)
	return a.updateTableName(newTableName)
}

func (a arweaveSyncListItem) As(alias string) *arweaveSyncListItem {
	a.arweaveSyncListItemDo.DO = *(a.arweaveSyncListItemDo.As(alias).(*gen.DO))
	return a.updateTableName(alias)
}

func (a *arweaveSyncListItem) updateTableName(table string) *arweaveSyncListItem {
	a.ALL = field.NewAsterisk(table)
	a.CommentID = field.NewUint64(table, "comment_id")
	a.UserID = field.NewUint64(table, "user_id")
	a.SiteID = field.NewUint64(table, "site_id")
	a.Slug = field.NewString(table, "slug")
	a.FavorCount = field.NewUint64(table, "favor_count")
	a.ReplyCount = field.NewUint64(table, "reply_count")
	a.ArweaveTxHash = field.NewString(table, "arweave_tx_hash")
	a.Content = field.NewString(table, "content")
	a.MixinUserID = field.NewString(table, "mixin_user_id")
	a.MixinIdentityNumber = field.NewString(table, "mixin_identity_number")
	a.FullName = field.NewString(table, "full_name")
	a.AvatarURL = field.NewString(table, "avatar_url")
	a.MvmPublicKey = field.NewString(table, "mvm_public_key")
	a.CreatedAt = field.NewTime(table, "created_at")
	a.UpdatedAt = field.NewTime(table, "updated_at")

	a.fillFieldMap()

	return a
}

func (a *arweaveSyncListItem) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := a.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (a *arweaveSyncListItem) fillFieldMap() {
	a.fieldMap = make(map[string]field.Expr, 15)
	a.fieldMap["comment_id"] = a.CommentID
	a.fieldMap["user_id"] = a.UserID
	a.fieldMap["site_id"] = a.SiteID
	a.fieldMap["slug"] = a.Slug
	a.fieldMap["favor_count"] = a.FavorCount
	a.fieldMap["reply_count"] = a.ReplyCount
	a.fieldMap["arweave_tx_hash"] = a.ArweaveTxHash
	a.fieldMap["content"] = a.Content
	a.fieldMap["mixin_user_id"] = a.MixinUserID
	a.fieldMap["mixin_identity_number"] = a.MixinIdentityNumber
	a.fieldMap["full_name"] = a.FullName
	a.fieldMap["avatar_url"] = a.AvatarURL
	a.fieldMap["mvm_public_key"] = a.MvmPublicKey
	a.fieldMap["created_at"] = a.CreatedAt
	a.fieldMap["updated_at"] = a.UpdatedAt
}

func (a arweaveSyncListItem) clone(db *gorm.DB) arweaveSyncListItem {
	a.arweaveSyncListItemDo.ReplaceConnPool(db.Statement.ConnPool)
	return a
}

func (a arweaveSyncListItem) replaceDB(db *gorm.DB) arweaveSyncListItem {
	a.arweaveSyncListItemDo.ReplaceDB(db)
	return a
}

type arweaveSyncListItemDo struct{ gen.DO }

type IArweaveSyncListItemDo interface {
	WithContext(ctx context.Context) IArweaveSyncListItemDo

	GetComments(ctx context.Context, siteID uint64, slug string, offset uint64, limit uint64, orderBy string, order string) (result []*core.Comment, err error)
	GetComment(ctx context.Context, id uint64) (result *core.Comment, err error)
	CreateComment(ctx context.Context, userID uint64, siteID uint64, slug string, content string) (result uint64, err error)
	UpdateCommentTxHash(ctx context.Context, id uint64, txHash string) (err error)
	CountComments(ctx context.Context, siteID uint64, slug string) (result uint64, err error)
	GetAllCommentsBySiteSlug(ctx context.Context, siteID uint64, slug string) (result []*core.Comment, err error)
	FindArweaveSyncList(ctx context.Context, limit uint64) (result []*core.ArweaveSyncListItem, err error)
	FavComment(ctx context.Context, id uint64, userID uint64, fav bool) (err error)
	IncCommentReplyCount(ctx context.Context, id uint64) (err error)
}

// SELECT
//
//	*
//
// FROM "comments"
// WHERE
//
//	"comments"."site_id" = @siteID
//	AND "comments"."slug" = @slug
//	AND "comments"."deleted_at" IS NULL
//
// {{if orderBy == "favor_count"}}
//
//	ORDER BY "favor_count" {{if order == "DESC" }} DESC {{else}} ASC {{end}}
//
// {{else}}
//
//	ORDER BY "created_at" {{if order == "DESC" }} DESC {{else}} ASC {{end}}
//
// {{end}}
// OFFSET @offset
// LIMIT @limit;
func (a arweaveSyncListItemDo) GetComments(ctx context.Context, siteID uint64, slug string, offset uint64, limit uint64, orderBy string, order string) (result []*core.Comment, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	params = append(params, siteID)
	params = append(params, slug)
	generateSQL.WriteString("SELECT * FROM \"comments\" WHERE \"comments\".\"site_id\" = ? AND \"comments\".\"slug\" = ? AND \"comments\".\"deleted_at\" IS NULL ")
	if orderBy == "favor_count" {
		generateSQL.WriteString("ORDER BY \"favor_count\" ")
		if order == "DESC" {
			generateSQL.WriteString("DESC ")
		} else {
			generateSQL.WriteString("ASC ")
		}
	} else {
		generateSQL.WriteString("ORDER BY \"created_at\" ")
		if order == "DESC" {
			generateSQL.WriteString("DESC ")
		} else {
			generateSQL.WriteString("ASC ")
		}
	}
	params = append(params, offset)
	params = append(params, limit)
	generateSQL.WriteString("OFFSET ? LIMIT ?; ")

	var executeSQL *gorm.DB
	executeSQL = a.UnderlyingDB().Raw(generateSQL.String(), params...).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT
// *
// FROM "comments"
// WHERE
//
//	"comments"."id" = @id
//	AND "comments"."deleted_at" IS NULL
//
// LIMIT 1;
func (a arweaveSyncListItemDo) GetComment(ctx context.Context, id uint64) (result *core.Comment, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	params = append(params, id)
	generateSQL.WriteString("SELECT * FROM \"comments\" WHERE \"comments\".\"id\" = ? AND \"comments\".\"deleted_at\" IS NULL LIMIT 1; ")

	var executeSQL *gorm.DB
	executeSQL = a.UnderlyingDB().Raw(generateSQL.String(), params...).Take(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// INSERT INTO "comments"
//
//	(
//		"user_id",
//		"site_id",
//		"slug",
//		"content",
//		"created_at", "updated_at"
//	)
//
// VALUES
//
//	(
//		@userID,
//		@siteID,
//		@slug,
//		@content,
//		NOW(), NOW()
//	)
//
// RETURNING id;
func (a arweaveSyncListItemDo) CreateComment(ctx context.Context, userID uint64, siteID uint64, slug string, content string) (result uint64, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	params = append(params, userID)
	params = append(params, siteID)
	params = append(params, slug)
	params = append(params, content)
	generateSQL.WriteString("INSERT INTO \"comments\" ( \"user_id\", \"site_id\", \"slug\", \"content\", \"created_at\", \"updated_at\" ) VALUES ( ?, ?, ?, ?, NOW(), NOW() ) RETURNING id; ")

	var executeSQL *gorm.DB
	executeSQL = a.UnderlyingDB().Raw(generateSQL.String(), params...).Take(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// UPDATE
//
//	"comments"
//
// SET
// "arweave_tx_hash" = @txHash,
//
//	"updated_at" = NOW()
//
// WHERE
//
//	"id" = :id AND "deleted_at" IS NULL;
//
// ;
func (a arweaveSyncListItemDo) UpdateCommentTxHash(ctx context.Context, id uint64, txHash string) (err error) {
	var params []interface{}

	var generateSQL strings.Builder
	params = append(params, txHash)
	generateSQL.WriteString("UPDATE \"comments\" SET \"arweave_tx_hash\" = ?, \"updated_at\" = NOW() WHERE \"id\" = :id AND \"deleted_at\" IS NULL; ; ")

	var executeSQL *gorm.DB
	executeSQL = a.UnderlyingDB().Exec(generateSQL.String(), params...) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT
//
//	COUNT("id")
//
// FROM "comments"
// WHERE
// {{if siteID != 0}}
//
//	"site_id"=@siteID AND "slug"=@slug AND
//
// {{end}}
// "deleted_at" IS NULL;
func (a arweaveSyncListItemDo) CountComments(ctx context.Context, siteID uint64, slug string) (result uint64, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT COUNT(\"id\") FROM \"comments\" WHERE ")
	if siteID != 0 {
		params = append(params, siteID)
		params = append(params, slug)
		generateSQL.WriteString("\"site_id\"=? AND \"slug\"=? AND ")
	}
	generateSQL.WriteString("\"deleted_at\" IS NULL; ")

	var executeSQL *gorm.DB
	executeSQL = a.UnderlyingDB().Raw(generateSQL.String(), params...).Take(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT
//
//	"id",
//	"user_id",
//	"site_id",
//	"slug",
//	"favor_count"
//
// FROM "comments"
// WHERE
//
//	"site_id" = $1
//
// AND
//
//	"slug" = $2
//
// AND "deleted_at" IS NULL;
func (a arweaveSyncListItemDo) GetAllCommentsBySiteSlug(ctx context.Context, siteID uint64, slug string) (result []*core.Comment, err error) {
	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT \"id\", \"user_id\", \"site_id\", \"slug\", \"favor_count\" FROM \"comments\" WHERE \"site_id\" = $1 AND \"slug\" = $2 AND \"deleted_at\" IS NULL; ")

	var executeSQL *gorm.DB
	executeSQL = a.UnderlyingDB().Raw(generateSQL.String()).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// "comments"."created_at",
//
//	"comments"."updated_at"
//
// FROM "comments"
// INNER JOIN "users" ON "comments"."user_id" = "users"."id"
// WHERE
//
//	"comments"."site_id" in (
//		select "id" FROM "sites" WHERE  "use_arweave" = true
//	)
//	AND  ("comments"."arweave_tx_hash" is NULL OR "comments"."arweave_tx_hash" = '')
//	AND "comments"."deleted_at" IS NULL
//
// ORDER BY "comments"."created_at" asc
// LIMIT :limit
// ;
func (a arweaveSyncListItemDo) FindArweaveSyncList(ctx context.Context, limit uint64) (result []*core.ArweaveSyncListItem, err error) {
	var generateSQL strings.Builder
	generateSQL.WriteString("\"comments\".\"created_at\", \"comments\".\"updated_at\" FROM \"comments\" INNER JOIN \"users\" ON \"comments\".\"user_id\" = \"users\".\"id\" WHERE \"comments\".\"site_id\" in ( select \"id\" FROM \"sites\" WHERE \"use_arweave\" = true ) AND (\"comments\".\"arweave_tx_hash\" is NULL OR \"comments\".\"arweave_tx_hash\" = '') AND \"comments\".\"deleted_at\" IS NULL ORDER BY \"comments\".\"created_at\" asc LIMIT :limit ; ")

	var executeSQL *gorm.DB
	executeSQL = a.UnderlyingDB().Raw(generateSQL.String()).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// UPDATE "comments"
// SET
//
//	{{if fav}}"favor_count" = "favor_count" + 1 {{else}}"favor_count" = "favor_count" - 1{{end}},
//	"updated_at" = NOW()
//
// WHERE
//
//	"id" = @id AND "deleted_at" IS NULL;
func (a arweaveSyncListItemDo) FavComment(ctx context.Context, id uint64, userID uint64, fav bool) (err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("UPDATE \"comments\" SET ")
	if fav {
		generateSQL.WriteString("\"favor_count\" = \"favor_count\" + 1 ")
	} else {
		generateSQL.WriteString("\"favor_count\" = \"favor_count\" - 1 ")
	}
	params = append(params, id)
	generateSQL.WriteString(", \"updated_at\" = NOW() WHERE \"id\" = ? AND \"deleted_at\" IS NULL; ")

	var executeSQL *gorm.DB
	executeSQL = a.UnderlyingDB().Exec(generateSQL.String(), params...) // ignore_security_alert
	err = executeSQL.Error

	return
}

// UPDATE
//
//	"comments"
//
// SET
//
//	"reply_count" = "reply_count" + 1,
//	"updated_at" = NOW()
//
// WHERE
//
//	"id" = @id AND "deleted_at" IS NULL;
func (a arweaveSyncListItemDo) IncCommentReplyCount(ctx context.Context, id uint64) (err error) {
	var params []interface{}

	var generateSQL strings.Builder
	params = append(params, id)
	generateSQL.WriteString("UPDATE \"comments\" SET \"reply_count\" = \"reply_count\" + 1, \"updated_at\" = NOW() WHERE \"id\" = ? AND \"deleted_at\" IS NULL; ")

	var executeSQL *gorm.DB
	executeSQL = a.UnderlyingDB().Exec(generateSQL.String(), params...) // ignore_security_alert
	err = executeSQL.Error

	return
}

func (a arweaveSyncListItemDo) WithContext(ctx context.Context) IArweaveSyncListItemDo {
	return a.withDO(a.DO.WithContext(ctx))
}

func (a *arweaveSyncListItemDo) withDO(do gen.Dao) *arweaveSyncListItemDo {
	a.DO = *do.(*gen.DO)
	return a
}
