// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dao

import (
	"context"
	"strings"

	"gorm.io/gorm"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"talkee/core"
)

func newTip(db *gorm.DB, opts ...gen.DOOption) tip {
	_tip := tip{}

	_tip.tipDo.UseDB(db, opts...)
	_tip.tipDo.UseModel(&core.Tip{})

	tableName := _tip.tipDo.TableName()
	_tip.ALL = field.NewAsterisk(tableName)
	_tip.ID = field.NewUint64(tableName, "id")
	_tip.UUID = field.NewString(tableName, "uuid")
	_tip.UserID = field.NewUint64(tableName, "user_id")
	_tip.SiteID = field.NewUint64(tableName, "site_id")
	_tip.Slug = field.NewString(tableName, "slug")
	_tip.OpponentID = field.NewUint64(tableName, "opponent_id")
	_tip.AirdropType = field.NewString(tableName, "airdrop_type")
	_tip.StrategyName = field.NewString(tableName, "strategy_name")
	_tip.StrategyParams = field.NewField(tableName, "strategy_params")
	_tip.AssetID = field.NewString(tableName, "asset_id")
	_tip.Amount = field.NewField(tableName, "amount")
	_tip.Memo = field.NewString(tableName, "memo")
	_tip.Status = field.NewInt(tableName, "status")
	_tip.CreatedAt = field.NewTime(tableName, "created_at")
	_tip.UpdatedAt = field.NewTime(tableName, "updated_at")
	_tip.DeletedAt = field.NewTime(tableName, "deleted_at")

	_tip.fillFieldMap()

	return _tip
}

type tip struct {
	tipDo

	ALL            field.Asterisk
	ID             field.Uint64
	UUID           field.String
	UserID         field.Uint64
	SiteID         field.Uint64
	Slug           field.String
	OpponentID     field.Uint64
	AirdropType    field.String
	StrategyName   field.String
	StrategyParams field.Field
	AssetID        field.String
	Amount         field.Field
	Memo           field.String
	Status         field.Int
	CreatedAt      field.Time
	UpdatedAt      field.Time
	DeletedAt      field.Time

	fieldMap map[string]field.Expr
}

func (t tip) Table(newTableName string) *tip {
	t.tipDo.UseTable(newTableName)
	return t.updateTableName(newTableName)
}

func (t tip) As(alias string) *tip {
	t.tipDo.DO = *(t.tipDo.As(alias).(*gen.DO))
	return t.updateTableName(alias)
}

func (t *tip) updateTableName(table string) *tip {
	t.ALL = field.NewAsterisk(table)
	t.ID = field.NewUint64(table, "id")
	t.UUID = field.NewString(table, "uuid")
	t.UserID = field.NewUint64(table, "user_id")
	t.SiteID = field.NewUint64(table, "site_id")
	t.Slug = field.NewString(table, "slug")
	t.OpponentID = field.NewUint64(table, "opponent_id")
	t.AirdropType = field.NewString(table, "airdrop_type")
	t.StrategyName = field.NewString(table, "strategy_name")
	t.StrategyParams = field.NewField(table, "strategy_params")
	t.AssetID = field.NewString(table, "asset_id")
	t.Amount = field.NewField(table, "amount")
	t.Memo = field.NewString(table, "memo")
	t.Status = field.NewInt(table, "status")
	t.CreatedAt = field.NewTime(table, "created_at")
	t.UpdatedAt = field.NewTime(table, "updated_at")
	t.DeletedAt = field.NewTime(table, "deleted_at")

	t.fillFieldMap()

	return t
}

func (t *tip) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := t.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (t *tip) fillFieldMap() {
	t.fieldMap = make(map[string]field.Expr, 16)
	t.fieldMap["id"] = t.ID
	t.fieldMap["uuid"] = t.UUID
	t.fieldMap["user_id"] = t.UserID
	t.fieldMap["site_id"] = t.SiteID
	t.fieldMap["slug"] = t.Slug
	t.fieldMap["opponent_id"] = t.OpponentID
	t.fieldMap["airdrop_type"] = t.AirdropType
	t.fieldMap["strategy_name"] = t.StrategyName
	t.fieldMap["strategy_params"] = t.StrategyParams
	t.fieldMap["asset_id"] = t.AssetID
	t.fieldMap["amount"] = t.Amount
	t.fieldMap["memo"] = t.Memo
	t.fieldMap["status"] = t.Status
	t.fieldMap["created_at"] = t.CreatedAt
	t.fieldMap["updated_at"] = t.UpdatedAt
	t.fieldMap["deleted_at"] = t.DeletedAt
}

func (t tip) clone(db *gorm.DB) tip {
	t.tipDo.ReplaceConnPool(db.Statement.ConnPool)
	return t
}

func (t tip) replaceDB(db *gorm.DB) tip {
	t.tipDo.ReplaceDB(db)
	return t
}

type tipDo struct{ gen.DO }

type ITipDo interface {
	WithContext(ctx context.Context) ITipDo

	CreateTip(ctx context.Context, tip *core.Tip) (result uint64, err error)
	GetTip(ctx context.Context, id uint64) (result *core.Tip, err error)
	GetTipByUUID(ctx context.Context, uuid string) (result *core.Tip, err error)
	GetTipsByStatus(ctx context.Context, status int, limit int) (result []*core.Tip, err error)
	GetTipsBySlug(ctx context.Context, siteID uint64, slug string, limit int) (result []*core.Tip, err error)
	UpdateTipStatus(ctx context.Context, id uint64, status int) (err error)
}

// INSERT INTO "tips"
// (
// "uuid", "user_id",
//
//	"site_id", "slug", "opponent_id", "airdrop_type",
//	"strategy_name", "strategy_params",
//	"asset_id", "amount", "memo",
//	"status", "created_at", "updated_at"
//
// )
// VALUES
// (
//
//	@tip.UUID, @tip.UserID,
//	@tip.SiteID, @tip.Slug, @tip.OpponentID, @tip.AirdropType,
//	@tip.StrategyName, @tip.StrategyParams,
//	@tip.AssetID, @tip.Amount, @tip.Memo,
//	0, NOW(), NOW()
//
// )
// RETURNING "id";
func (t tipDo) CreateTip(ctx context.Context, tip *core.Tip) (result uint64, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	params = append(params, tip.UUID)
	params = append(params, tip.UserID)
	params = append(params, tip.SiteID)
	params = append(params, tip.Slug)
	params = append(params, tip.OpponentID)
	params = append(params, tip.AirdropType)
	params = append(params, tip.StrategyName)
	params = append(params, tip.StrategyParams)
	params = append(params, tip.AssetID)
	params = append(params, tip.Amount)
	params = append(params, tip.Memo)
	generateSQL.WriteString("INSERT INTO \"tips\" ( \"uuid\", \"user_id\", \"site_id\", \"slug\", \"opponent_id\", \"airdrop_type\", \"strategy_name\", \"strategy_params\", \"asset_id\", \"amount\", \"memo\", \"status\", \"created_at\", \"updated_at\" ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, 0, NOW(), NOW() ) RETURNING \"id\"; ")

	var executeSQL *gorm.DB
	executeSQL = t.UnderlyingDB().Raw(generateSQL.String(), params...).Take(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT
// *
// FROM "tips" WHERE
// "id" = @id AND "deleted_at" IS NULL
// LIMIT 1;
func (t tipDo) GetTip(ctx context.Context, id uint64) (result *core.Tip, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	params = append(params, id)
	generateSQL.WriteString("SELECT * FROM \"tips\" WHERE \"id\" = ? AND \"deleted_at\" IS NULL LIMIT 1; ")

	var executeSQL *gorm.DB
	executeSQL = t.UnderlyingDB().Raw(generateSQL.String(), params...).Take(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT
// *
// FROM "tips" WHERE
// "uuid" = @uuid AND "deleted_at" IS NULL
// LIMIT 1;
func (t tipDo) GetTipByUUID(ctx context.Context, uuid string) (result *core.Tip, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	params = append(params, uuid)
	generateSQL.WriteString("SELECT * FROM \"tips\" WHERE \"uuid\" = ? AND \"deleted_at\" IS NULL LIMIT 1; ")

	var executeSQL *gorm.DB
	executeSQL = t.UnderlyingDB().Raw(generateSQL.String(), params...).Take(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT
// *
// FROM "tips" WHERE
// "status" = @status AND "deleted_at" IS NULL
// ORDER BY "id" ASC
// LIMIT @limit
func (t tipDo) GetTipsByStatus(ctx context.Context, status int, limit int) (result []*core.Tip, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	params = append(params, status)
	params = append(params, limit)
	generateSQL.WriteString("SELECT * FROM \"tips\" WHERE \"status\" = ? AND \"deleted_at\" IS NULL ORDER BY \"id\" ASC LIMIT ? ")

	var executeSQL *gorm.DB
	executeSQL = t.UnderlyingDB().Raw(generateSQL.String(), params...).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT
// *
// FROM "tips" WHERE
// "site_id" = @siteID AND "slug" = @slug AND "status"=3 AND "deleted_at" IS NULL
// ORDER BY "id" ASC
// LIMIT @limit
func (t tipDo) GetTipsBySlug(ctx context.Context, siteID uint64, slug string, limit int) (result []*core.Tip, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	params = append(params, siteID)
	params = append(params, slug)
	params = append(params, limit)
	generateSQL.WriteString("SELECT * FROM \"tips\" WHERE \"site_id\" = ? AND \"slug\" = ? AND \"status\"=3 AND \"deleted_at\" IS NULL ORDER BY \"id\" ASC LIMIT ? ")

	var executeSQL *gorm.DB
	executeSQL = t.UnderlyingDB().Raw(generateSQL.String(), params...).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// UPDATE "tips" SET
// "status" = @status,
// "updated_at" = NOW()
// WHERE "id" = @id AND "deleted_at" IS NULL;
func (t tipDo) UpdateTipStatus(ctx context.Context, id uint64, status int) (err error) {
	var params []interface{}

	var generateSQL strings.Builder
	params = append(params, status)
	params = append(params, id)
	generateSQL.WriteString("UPDATE \"tips\" SET \"status\" = ?, \"updated_at\" = NOW() WHERE \"id\" = ? AND \"deleted_at\" IS NULL; ")

	var executeSQL *gorm.DB
	executeSQL = t.UnderlyingDB().Exec(generateSQL.String(), params...) // ignore_security_alert
	err = executeSQL.Error

	return
}

func (t tipDo) WithContext(ctx context.Context) ITipDo {
	return t.withDO(t.DO.WithContext(ctx))
}

func (t *tipDo) withDO(do gen.Dao) *tipDo {
	t.DO = *do.(*gen.DO)
	return t
}
