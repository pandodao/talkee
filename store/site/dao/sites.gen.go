// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dao

import (
	"context"
	"strings"

	"gorm.io/gorm"

	"gorm.io/gen"
	"gorm.io/gen/field"
	"gorm.io/gen/helper"

	"talkee/core"
)

func newSite(db *gorm.DB, opts ...gen.DOOption) site {
	_site := site{}

	_site.siteDo.UseDB(db, opts...)
	_site.siteDo.UseModel(&core.Site{})

	tableName := _site.siteDo.TableName()
	_site.ALL = field.NewAsterisk(tableName)
	_site.ID = field.NewUint64(tableName, "id")
	_site.UserID = field.NewUint64(tableName, "user_id")
	_site.Origins = field.NewField(tableName, "origins")
	_site.Origin = field.NewString(tableName, "origin")
	_site.Name = field.NewString(tableName, "name")
	_site.UseArweave = field.NewBool(tableName, "use_arweave")
	_site.RewardStrategy = field.NewInt(tableName, "reward_strategy")
	_site.CreatedAt = field.NewTime(tableName, "created_at")
	_site.UpdatedAt = field.NewTime(tableName, "updated_at")
	_site.DeletedAt = field.NewTime(tableName, "deleted_at")

	_site.fillFieldMap()

	return _site
}

type site struct {
	siteDo

	ALL            field.Asterisk
	ID             field.Uint64
	UserID         field.Uint64
	Origins        field.Field
	Origin         field.String
	Name           field.String
	UseArweave     field.Bool
	RewardStrategy field.Int
	CreatedAt      field.Time
	UpdatedAt      field.Time
	DeletedAt      field.Time

	fieldMap map[string]field.Expr
}

func (s site) Table(newTableName string) *site {
	s.siteDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s site) As(alias string) *site {
	s.siteDo.DO = *(s.siteDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *site) updateTableName(table string) *site {
	s.ALL = field.NewAsterisk(table)
	s.ID = field.NewUint64(table, "id")
	s.UserID = field.NewUint64(table, "user_id")
	s.Origins = field.NewField(table, "origins")
	s.Origin = field.NewString(table, "origin")
	s.Name = field.NewString(table, "name")
	s.UseArweave = field.NewBool(table, "use_arweave")
	s.RewardStrategy = field.NewInt(table, "reward_strategy")
	s.CreatedAt = field.NewTime(table, "created_at")
	s.UpdatedAt = field.NewTime(table, "updated_at")
	s.DeletedAt = field.NewTime(table, "deleted_at")

	s.fillFieldMap()

	return s
}

func (s *site) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *site) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 10)
	s.fieldMap["id"] = s.ID
	s.fieldMap["user_id"] = s.UserID
	s.fieldMap["origins"] = s.Origins
	s.fieldMap["origin"] = s.Origin
	s.fieldMap["name"] = s.Name
	s.fieldMap["use_arweave"] = s.UseArweave
	s.fieldMap["reward_strategy"] = s.RewardStrategy
	s.fieldMap["created_at"] = s.CreatedAt
	s.fieldMap["updated_at"] = s.UpdatedAt
	s.fieldMap["deleted_at"] = s.DeletedAt
}

func (s site) clone(db *gorm.DB) site {
	s.siteDo.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s site) replaceDB(db *gorm.DB) site {
	s.siteDo.ReplaceDB(db)
	return s
}

type siteDo struct{ gen.DO }

type ISiteDo interface {
	WithContext(ctx context.Context) ISiteDo

	GetSite(ctx context.Context, siteID uint64) (result *core.Site, err error)
	GetSiteByOrigin(ctx context.Context, origin string) (result *core.Site, err error)
	GetSitesByUser(ctx context.Context, userID uint64) (result []*core.Site, err error)
	CreateSite(ctx context.Context, userID uint64, name string, origins core.SiteOrigins, useArweave bool) (result uint64, err error)
	UpdateSite(ctx context.Context, id uint64, site *core.Site) (err error)
}

// SELECT
//
//	*
//
// FROM @@table
// WHERE
//
//	"id" = @siteID
//
// AND deleted_at IS NULL
// LIMIT 1;
func (s siteDo) GetSite(ctx context.Context, siteID uint64) (result *core.Site, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	params = append(params, siteID)
	generateSQL.WriteString("SELECT * FROM sites WHERE \"id\" = ? AND deleted_at IS NULL LIMIT 1; ")

	var executeSQL *gorm.DB
	executeSQL = s.UnderlyingDB().Raw(generateSQL.String(), params...).Take(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT
//
//	*
//
// FROM @@table
// WHERE
// @origin=ANY("origins")
// AND
//
//	deleted_at IS NULL
//
// LIMIT 1;
func (s siteDo) GetSiteByOrigin(ctx context.Context, origin string) (result *core.Site, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	params = append(params, origin)
	generateSQL.WriteString("SELECT * FROM sites WHERE ?=ANY(\"origins\") AND deleted_at IS NULL LIMIT 1; ")

	var executeSQL *gorm.DB
	executeSQL = s.UnderlyingDB().Raw(generateSQL.String(), params...).Take(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT
//
//	*
//
// FROM @@table
// WHERE
//
//	"user_id" = @userID
//
// AND
//
//	deleted_at IS NULL;
func (s siteDo) GetSitesByUser(ctx context.Context, userID uint64) (result []*core.Site, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	params = append(params, userID)
	generateSQL.WriteString("SELECT * FROM sites WHERE \"user_id\" = ? AND deleted_at IS NULL; ")

	var executeSQL *gorm.DB
	executeSQL = s.UnderlyingDB().Raw(generateSQL.String(), params...).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// INSERT INTO @@table
//
//	(
//		"user_id",
//		"name",
//		"origins",
//		"use_arweave",
//		"reward_strategy",
//		"created_at", "updated_at"
//	)
//
// VALUES
//
//	(
//		@userID,
//		@name,
//		@origins,
//		@useArweave,
//		0,
//		NOW(), NOW()
//	)
//
// RETURNING id
// ;
func (s siteDo) CreateSite(ctx context.Context, userID uint64, name string, origins core.SiteOrigins, useArweave bool) (result uint64, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	params = append(params, userID)
	params = append(params, name)
	params = append(params, origins)
	params = append(params, useArweave)
	generateSQL.WriteString("INSERT INTO sites ( \"user_id\", \"name\", \"origins\", \"use_arweave\", \"reward_strategy\", \"created_at\", \"updated_at\" ) VALUES ( ?, ?, ?, ?, 0, NOW(), NOW() ) RETURNING id ; ")

	var executeSQL *gorm.DB
	executeSQL = s.UnderlyingDB().Raw(generateSQL.String(), params...).Take(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// UPDATE @@table
//
//	{{set}}
//	  "name"=@site.Name,
//	  "origins"=@site.Origins,
//	  "use_arweave"=@site.UseArweave,
//		"updated_at"=NOW()
//	{{end}}
//
// WHERE
//
//	"id" = @id AND "deleted_at" IS NULL
//
// ;
func (s siteDo) UpdateSite(ctx context.Context, id uint64, site *core.Site) (err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("UPDATE sites ")
	var setSQL0 strings.Builder
	params = append(params, site.Name)
	params = append(params, site.Origins)
	params = append(params, site.UseArweave)
	setSQL0.WriteString("\"name\"=?, \"origins\"=?, \"use_arweave\"=?, \"updated_at\"=NOW() ")
	helper.JoinSetBuilder(&generateSQL, setSQL0)
	params = append(params, id)
	generateSQL.WriteString("WHERE \"id\" = ? AND \"deleted_at\" IS NULL ; ")

	var executeSQL *gorm.DB
	executeSQL = s.UnderlyingDB().Exec(generateSQL.String(), params...) // ignore_security_alert
	err = executeSQL.Error

	return
}

func (s siteDo) WithContext(ctx context.Context) ISiteDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s *siteDo) withDO(do gen.Dao) *siteDo {
	s.DO = *do.(*gen.DO)
	return s
}
