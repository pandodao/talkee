// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dao

import (
	"context"
	"strings"

	"gorm.io/gorm"

	"gorm.io/gen"
	"gorm.io/gen/field"
	"gorm.io/gen/helper"

	"talkee/core"
)

func newProperty(db *gorm.DB, opts ...gen.DOOption) property {
	_property := property{}

	_property.propertyDo.UseDB(db, opts...)
	_property.propertyDo.UseModel(&core.Property{})

	tableName := _property.propertyDo.TableName()
	_property.ALL = field.NewAsterisk(tableName)
	_property.Key = field.NewString(tableName, "key")
	_property.Value = field.NewString(tableName, "value")
	_property.UpdatedAt = field.NewTime(tableName, "updated_at")

	_property.fillFieldMap()

	return _property
}

type property struct {
	propertyDo

	ALL       field.Asterisk
	Key       field.String
	Value     field.String
	UpdatedAt field.Time

	fieldMap map[string]field.Expr
}

func (p property) Table(newTableName string) *property {
	p.propertyDo.UseTable(newTableName)
	return p.updateTableName(newTableName)
}

func (p property) As(alias string) *property {
	p.propertyDo.DO = *(p.propertyDo.As(alias).(*gen.DO))
	return p.updateTableName(alias)
}

func (p *property) updateTableName(table string) *property {
	p.ALL = field.NewAsterisk(table)
	p.Key = field.NewString(table, "key")
	p.Value = field.NewString(table, "value")
	p.UpdatedAt = field.NewTime(table, "updated_at")

	p.fillFieldMap()

	return p
}

func (p *property) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := p.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (p *property) fillFieldMap() {
	p.fieldMap = make(map[string]field.Expr, 3)
	p.fieldMap["key"] = p.Key
	p.fieldMap["value"] = p.Value
	p.fieldMap["updated_at"] = p.UpdatedAt
}

func (p property) clone(db *gorm.DB) property {
	p.propertyDo.ReplaceConnPool(db.Statement.ConnPool)
	return p
}

func (p property) replaceDB(db *gorm.DB) property {
	p.propertyDo.ReplaceDB(db)
	return p
}

type propertyDo struct{ gen.DO }

type IPropertyDo interface {
	WithContext(ctx context.Context) IPropertyDo

	Get(ctx context.Context, key string) (result string, err error)
	Set(ctx context.Context, key string, value interface{}) (result int64, err error)
}

// SELECT value FROM @@table WHERE key=@key
func (p propertyDo) Get(ctx context.Context, key string) (result string, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	params = append(params, key)
	generateSQL.WriteString("SELECT value FROM properties WHERE key=? ")

	var executeSQL *gorm.DB
	executeSQL = p.UnderlyingDB().Raw(generateSQL.String(), params...).Take(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// UPDATE @@table
// {{set}}
//
//	value=@value,
//	updated_at=NOW()
//
// {{end}}
// WHERE key=@key
func (p propertyDo) Set(ctx context.Context, key string, value interface{}) (result int64, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("UPDATE properties ")
	var setSQL0 strings.Builder
	params = append(params, value)
	setSQL0.WriteString("value=?, updated_at=NOW() ")
	helper.JoinSetBuilder(&generateSQL, setSQL0)
	params = append(params, key)
	generateSQL.WriteString("WHERE key=? ")

	var executeSQL *gorm.DB
	executeSQL = p.UnderlyingDB().Raw(generateSQL.String(), params...).Take(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

func (p propertyDo) WithContext(ctx context.Context) IPropertyDo {
	return p.withDO(p.DO.WithContext(ctx))
}

func (p *propertyDo) withDO(do gen.Dao) *propertyDo {
	p.DO = *do.(*gen.DO)
	return p
}
